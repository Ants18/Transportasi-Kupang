<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="initial-scale=1,user-scalable=no,maximum-scale=1,width=device-width">
        <meta name="mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <link rel="stylesheet" href="css/leaflet.css">
        <link rel="stylesheet" href="css/L.Control.Layers.Tree.css">
        <link rel="stylesheet" href="css/L.Control.Locate.min.css">
        <link rel="stylesheet" href="css/qgis2web.css">
        <link rel="stylesheet" href="css/fontawesome-all.min.css">
        <link rel="stylesheet" href="css/leaflet.photon.css">
        <link rel="stylesheet" href="css/leaflet-measure.css">
        <style>
        html, body, #map {
            width: 100%;
            height: 100%;
            padding: 0;
            margin: 0;
        }
        </style>
        <title>Peta Trayek Angkutan Umum Kota Kupang</title>
    </head>
    <body>
        <div id="map">
        </div>
        <script src="js/qgis2web_expressions.js"></script>
        <script src="js/leaflet.js"></script>
        <script src="js/L.Control.Layers.Tree.min.js"></script>
        <script src="js/L.Control.Locate.min.js"></script>
        <script src="js/leaflet.rotatedMarker.js"></script>
        <script src="js/leaflet.pattern.js"></script>
        <script src="js/leaflet-hash.js"></script>
        <script src="js/Autolinker.min.js"></script>
        <script src="js/rbush.min.js"></script>
        <script src="js/labelgun.min.js"></script>
        <script src="js/labels.js"></script>
        <script src="js/leaflet.photon.js"></script>
        <script src="js/leaflet-measure.js"></script>
        <script src="data/TerminalOeboboTerminalBetunMalaka_1.js"></script>
        <script src="data/TerminalBimokuDiliTimorLeste_2.js"></script>
        <script src="data/TerminalOeboboTerminalLolowa_3.js"></script>
        <script src="data/TerminalOeboboTerminalKefamenanu_4.js"></script>
        <script src="data/TerminalOeboboTerminalSoe_5.js"></script>
        <script src="data/TerminalNoelbakiTerminalKupang_6.js"></script>
        <script src="data/TerminalSoe_7.js"></script>
        <script src="data/TerminalTipeCKotaKefamenanu_8.js"></script>
        <script src="data/TerminalTipeCLolowaBelu_9.js"></script>
        <script src="data/TerminalTipeAKefamenanu_10.js"></script>
        <script src="data/TerminalKotaLamaKupang_11.js"></script>
        <script src="data/TerminalOeboboKotaKupang_12.js"></script>
        <script src="data/TerminalBimokuKotaKupang_13.js"></script>
        <script src="data/TerminalNoelbaki_14.js"></script>
        <script src="data/DiliTimorLeste_15.js"></script>
        <script src="data/TerminalBetunMalaka_16.js"></script>
        <script>
        var highlightLayer;
        function highlightFeature(e) {
            highlightLayer = e.target;

            if (e.target.feature.geometry.type === 'LineString' || e.target.feature.geometry.type === 'MultiLineString') {
              highlightLayer.setStyle({
                color: '#ffff00',
              });
            } else {
              highlightLayer.setStyle({
                fillColor: '#ffff00',
                fillOpacity: 1
              });
            }
            highlightLayer.openPopup();
        }
        var map = L.map('map', {
            zoomControl:false, maxZoom:28, minZoom:1
        }).fitBounds([[-11.020069454716538,121.06878043137519],[-8.042363008779876,125.01930694980338]]);
        var hash = new L.Hash(map);
        map.attributionControl.setPrefix('<a href="https://github.com/tomchadwin/qgis2web" target="_blank">qgis2web</a> &middot; <a href="https://leafletjs.com" title="A JS library for interactive maps">Leaflet</a> &middot; <a href="https://qgis.org">QGIS</a>');
        var autolinker = new Autolinker({truncate: {length: 30, location: 'smart'}});
        // remove popup's row if "visible-with-data"
        function removeEmptyRowsFromPopupContent(content, feature) {
         var tempDiv = document.createElement('div');
         tempDiv.innerHTML = content;
         var rows = tempDiv.querySelectorAll('tr');
         for (var i = 0; i < rows.length; i++) {
             var td = rows[i].querySelector('td.visible-with-data');
             var key = td ? td.id : '';
             if (td && td.classList.contains('visible-with-data') && feature.properties[key] == null) {
                 rows[i].parentNode.removeChild(rows[i]);
             }
         }
         return tempDiv.innerHTML;
        }
        // add class to format popup if it contains media
		function addClassToPopupIfMedia(content, popup) {
			var tempDiv = document.createElement('div');
			tempDiv.innerHTML = content;
			if (tempDiv.querySelector('td img')) {
				popup._contentNode.classList.add('media');
					// Delay to force the redraw
					setTimeout(function() {
						popup.update();
					}, 10);
			} else {
				popup._contentNode.classList.remove('media');
			}
		}
        var title = new L.Control({'position':'bottomleft'});
        title.onAdd = function (map) {
            this._div = L.DomUtil.create('div', 'info');
            this.update();
            return this._div;
        };
        title.update = function () {
            this._div.innerHTML = '<h2>Peta Trayek Angkutan Umum Kota Kupang</h2>';
        };
        title.addTo(map);
        var zoomControl = L.control.zoom({
            position: 'topleft'
        }).addTo(map);
        L.control.locate({locateOptions: {maxZoom: 19}}).addTo(map);
        var measureControl = new L.Control.Measure({
            position: 'topleft',
            primaryLengthUnit: 'meters',
            secondaryLengthUnit: 'kilometers',
            primaryAreaUnit: 'sqmeters',
            secondaryAreaUnit: 'hectares'
        });
        measureControl.addTo(map);
        document.getElementsByClassName('leaflet-control-measure-toggle')[0].innerHTML = '';
        document.getElementsByClassName('leaflet-control-measure-toggle')[0].className += ' fas fa-ruler';
        var bounds_group = new L.featureGroup([]);
        function setBounds() {
        }
        map.createPane('pane_OpenStreetMap_0');
        map.getPane('pane_OpenStreetMap_0').style.zIndex = 400;
        var layer_OpenStreetMap_0 = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            pane: 'pane_OpenStreetMap_0',
            opacity: 1.0,
            attribution: '',
            minZoom: 1,
            maxZoom: 28,
            minNativeZoom: 0,
            maxNativeZoom: 19
        });
        layer_OpenStreetMap_0;
        map.addLayer(layer_OpenStreetMap_0);
        function pop_TerminalOeboboTerminalBetunMalaka_1(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (var i in e.target._eventParents) {
                        if (typeof e.target._eventParents[i].resetStyle === 'function') {
                            e.target._eventParents[i].resetStyle(e.target);
                        }
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td class="visible-with-data" id="Name" colspan="2"><strong>Name</strong><br />' + (feature.properties['Name'] !== null ? autolinker.link(String(feature.properties['Name']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Pagi" colspan="2"><strong>Pagi</strong><br />' + (feature.properties['Pagi'] !== null ? autolinker.link(String(feature.properties['Pagi']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Sore" colspan="2"><strong>Sore</strong><br />' + (feature.properties['Sore'] !== null ? autolinker.link(String(feature.properties['Sore']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Tarif" colspan="2"><strong>Tarif</strong><br />' + (feature.properties['Tarif'] !== null ? autolinker.link(String(feature.properties['Tarif']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_TerminalOeboboTerminalBetunMalaka_1_0() {
            return {
                pane: 'pane_TerminalOeboboTerminalBetunMalaka_1',
                opacity: 1,
                color: 'rgba(190,207,80,1.0)',
                dashArray: '',
                lineCap: 'square',
                lineJoin: 'bevel',
                weight: 3.0,
                fillOpacity: 0,
                interactive: true,
            }
        }
        map.createPane('pane_TerminalOeboboTerminalBetunMalaka_1');
        map.getPane('pane_TerminalOeboboTerminalBetunMalaka_1').style.zIndex = 401;
        map.getPane('pane_TerminalOeboboTerminalBetunMalaka_1').style['mix-blend-mode'] = 'normal';
        var layer_TerminalOeboboTerminalBetunMalaka_1 = new L.geoJson(json_TerminalOeboboTerminalBetunMalaka_1, {
            attribution: '',
            interactive: true,
            dataVar: 'json_TerminalOeboboTerminalBetunMalaka_1',
            layerName: 'layer_TerminalOeboboTerminalBetunMalaka_1',
            pane: 'pane_TerminalOeboboTerminalBetunMalaka_1',
            onEachFeature: pop_TerminalOeboboTerminalBetunMalaka_1,
            style: style_TerminalOeboboTerminalBetunMalaka_1_0,
        });
        bounds_group.addLayer(layer_TerminalOeboboTerminalBetunMalaka_1);
        map.addLayer(layer_TerminalOeboboTerminalBetunMalaka_1);
        function pop_TerminalBimokuDiliTimorLeste_2(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (var i in e.target._eventParents) {
                        if (typeof e.target._eventParents[i].resetStyle === 'function') {
                            e.target._eventParents[i].resetStyle(e.target);
                        }
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td class="visible-with-data" id="Name" colspan="2"><strong>Name</strong><br />' + (feature.properties['Name'] !== null ? autolinker.link(String(feature.properties['Name']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Berangkat" colspan="2"><strong>Berangkat</strong><br />' + (feature.properties['Berangkat'] !== null ? autolinker.link(String(feature.properties['Berangkat']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Datang" colspan="2"><strong>Datang</strong><br />' + (feature.properties['Datang'] !== null ? autolinker.link(String(feature.properties['Datang']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Tarif" colspan="2"><strong>Tarif</strong><br />' + (feature.properties['Tarif'] !== null ? autolinker.link(String(feature.properties['Tarif']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_TerminalBimokuDiliTimorLeste_2_0() {
            return {
                pane: 'pane_TerminalBimokuDiliTimorLeste_2',
                opacity: 1,
                color: 'rgba(231,113,72,1.0)',
                dashArray: '',
                lineCap: 'square',
                lineJoin: 'bevel',
                weight: 3.0,
                fillOpacity: 0,
                interactive: true,
            }
        }
        map.createPane('pane_TerminalBimokuDiliTimorLeste_2');
        map.getPane('pane_TerminalBimokuDiliTimorLeste_2').style.zIndex = 402;
        map.getPane('pane_TerminalBimokuDiliTimorLeste_2').style['mix-blend-mode'] = 'normal';
        var layer_TerminalBimokuDiliTimorLeste_2 = new L.geoJson(json_TerminalBimokuDiliTimorLeste_2, {
            attribution: '',
            interactive: true,
            dataVar: 'json_TerminalBimokuDiliTimorLeste_2',
            layerName: 'layer_TerminalBimokuDiliTimorLeste_2',
            pane: 'pane_TerminalBimokuDiliTimorLeste_2',
            onEachFeature: pop_TerminalBimokuDiliTimorLeste_2,
            style: style_TerminalBimokuDiliTimorLeste_2_0,
        });
        bounds_group.addLayer(layer_TerminalBimokuDiliTimorLeste_2);
        map.addLayer(layer_TerminalBimokuDiliTimorLeste_2);
        function pop_TerminalOeboboTerminalLolowa_3(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (var i in e.target._eventParents) {
                        if (typeof e.target._eventParents[i].resetStyle === 'function') {
                            e.target._eventParents[i].resetStyle(e.target);
                        }
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td class="visible-with-data" id="Name" colspan="2"><strong>Name</strong><br />' + (feature.properties['Name'] !== null ? autolinker.link(String(feature.properties['Name']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Pagi" colspan="2"><strong>Pagi</strong><br />' + (feature.properties['Pagi'] !== null ? autolinker.link(String(feature.properties['Pagi']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Sore" colspan="2"><strong>Sore</strong><br />' + (feature.properties['Sore'] !== null ? autolinker.link(String(feature.properties['Sore']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Tarif" colspan="2"><strong>Tarif</strong><br />' + (feature.properties['Tarif'] !== null ? autolinker.link(String(feature.properties['Tarif']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_TerminalOeboboTerminalLolowa_3_0() {
            return {
                pane: 'pane_TerminalOeboboTerminalLolowa_3',
                opacity: 1,
                color: 'rgba(152,125,183,1.0)',
                dashArray: '',
                lineCap: 'square',
                lineJoin: 'bevel',
                weight: 3.0,
                fillOpacity: 0,
                interactive: true,
            }
        }
        map.createPane('pane_TerminalOeboboTerminalLolowa_3');
        map.getPane('pane_TerminalOeboboTerminalLolowa_3').style.zIndex = 403;
        map.getPane('pane_TerminalOeboboTerminalLolowa_3').style['mix-blend-mode'] = 'normal';
        var layer_TerminalOeboboTerminalLolowa_3 = new L.geoJson(json_TerminalOeboboTerminalLolowa_3, {
            attribution: '',
            interactive: true,
            dataVar: 'json_TerminalOeboboTerminalLolowa_3',
            layerName: 'layer_TerminalOeboboTerminalLolowa_3',
            pane: 'pane_TerminalOeboboTerminalLolowa_3',
            onEachFeature: pop_TerminalOeboboTerminalLolowa_3,
            style: style_TerminalOeboboTerminalLolowa_3_0,
        });
        bounds_group.addLayer(layer_TerminalOeboboTerminalLolowa_3);
        map.addLayer(layer_TerminalOeboboTerminalLolowa_3);
        function pop_TerminalOeboboTerminalKefamenanu_4(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (var i in e.target._eventParents) {
                        if (typeof e.target._eventParents[i].resetStyle === 'function') {
                            e.target._eventParents[i].resetStyle(e.target);
                        }
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td class="visible-with-data" id="Name" colspan="2"><strong>Name</strong><br />' + (feature.properties['Name'] !== null ? autolinker.link(String(feature.properties['Name']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Pagi" colspan="2"><strong>Pagi</strong><br />' + (feature.properties['Pagi'] !== null ? autolinker.link(String(feature.properties['Pagi']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Sore" colspan="2"><strong>Sore</strong><br />' + (feature.properties['Sore'] !== null ? autolinker.link(String(feature.properties['Sore']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="tarif" colspan="2"><strong>tarif</strong><br />' + (feature.properties['tarif'] !== null ? autolinker.link(String(feature.properties['tarif']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_TerminalOeboboTerminalKefamenanu_4_0() {
            return {
                pane: 'pane_TerminalOeboboTerminalKefamenanu_4',
                opacity: 1,
                color: 'rgba(225,89,137,1.0)',
                dashArray: '',
                lineCap: 'square',
                lineJoin: 'bevel',
                weight: 3.0,
                fillOpacity: 0,
                interactive: true,
            }
        }
        map.createPane('pane_TerminalOeboboTerminalKefamenanu_4');
        map.getPane('pane_TerminalOeboboTerminalKefamenanu_4').style.zIndex = 404;
        map.getPane('pane_TerminalOeboboTerminalKefamenanu_4').style['mix-blend-mode'] = 'normal';
        var layer_TerminalOeboboTerminalKefamenanu_4 = new L.geoJson(json_TerminalOeboboTerminalKefamenanu_4, {
            attribution: '',
            interactive: true,
            dataVar: 'json_TerminalOeboboTerminalKefamenanu_4',
            layerName: 'layer_TerminalOeboboTerminalKefamenanu_4',
            pane: 'pane_TerminalOeboboTerminalKefamenanu_4',
            onEachFeature: pop_TerminalOeboboTerminalKefamenanu_4,
            style: style_TerminalOeboboTerminalKefamenanu_4_0,
        });
        bounds_group.addLayer(layer_TerminalOeboboTerminalKefamenanu_4);
        map.addLayer(layer_TerminalOeboboTerminalKefamenanu_4);
        function pop_TerminalOeboboTerminalSoe_5(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (var i in e.target._eventParents) {
                        if (typeof e.target._eventParents[i].resetStyle === 'function') {
                            e.target._eventParents[i].resetStyle(e.target);
                        }
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td class="visible-with-data" id="Name" colspan="2"><strong>Name</strong><br />' + (feature.properties['Name'] !== null ? autolinker.link(String(feature.properties['Name']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Pagi" colspan="2"><strong>Pagi</strong><br />' + (feature.properties['Pagi'] !== null ? autolinker.link(String(feature.properties['Pagi']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Sore" colspan="2"><strong>Sore</strong><br />' + (feature.properties['Sore'] !== null ? autolinker.link(String(feature.properties['Sore']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Tarif" colspan="2"><strong>Tarif</strong><br />' + (feature.properties['Tarif'] !== null ? autolinker.link(String(feature.properties['Tarif']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_TerminalOeboboTerminalSoe_5_0() {
            return {
                pane: 'pane_TerminalOeboboTerminalSoe_5',
                opacity: 1,
                color: 'rgba(11,162,0,1.0)',
                dashArray: '',
                lineCap: 'square',
                lineJoin: 'bevel',
                weight: 3.0,
                fillOpacity: 0,
                interactive: true,
            }
        }
        map.createPane('pane_TerminalOeboboTerminalSoe_5');
        map.getPane('pane_TerminalOeboboTerminalSoe_5').style.zIndex = 405;
        map.getPane('pane_TerminalOeboboTerminalSoe_5').style['mix-blend-mode'] = 'normal';
        var layer_TerminalOeboboTerminalSoe_5 = new L.geoJson(json_TerminalOeboboTerminalSoe_5, {
            attribution: '',
            interactive: true,
            dataVar: 'json_TerminalOeboboTerminalSoe_5',
            layerName: 'layer_TerminalOeboboTerminalSoe_5',
            pane: 'pane_TerminalOeboboTerminalSoe_5',
            onEachFeature: pop_TerminalOeboboTerminalSoe_5,
            style: style_TerminalOeboboTerminalSoe_5_0,
        });
        bounds_group.addLayer(layer_TerminalOeboboTerminalSoe_5);
        map.addLayer(layer_TerminalOeboboTerminalSoe_5);
        function pop_TerminalNoelbakiTerminalKupang_6(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (var i in e.target._eventParents) {
                        if (typeof e.target._eventParents[i].resetStyle === 'function') {
                            e.target._eventParents[i].resetStyle(e.target);
                        }
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td class="visible-with-data" id="Name" colspan="2"><strong>Name</strong><br />' + (feature.properties['Name'] !== null ? autolinker.link(String(feature.properties['Name']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Pagi" colspan="2"><strong>Pagi</strong><br />' + (feature.properties['Pagi'] !== null ? autolinker.link(String(feature.properties['Pagi']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Sore" colspan="2"><strong>Sore</strong><br />' + (feature.properties['Sore'] !== null ? autolinker.link(String(feature.properties['Sore']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Tarif" colspan="2"><strong>Tarif</strong><br />' + (feature.properties['Tarif'] !== null ? autolinker.link(String(feature.properties['Tarif']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_TerminalNoelbakiTerminalKupang_6_0() {
            return {
                pane: 'pane_TerminalNoelbakiTerminalKupang_6',
                opacity: 1,
                color: 'rgba(255,158,23,1.0)',
                dashArray: '',
                lineCap: 'square',
                lineJoin: 'bevel',
                weight: 3.0,
                fillOpacity: 0,
                interactive: true,
            }
        }
        map.createPane('pane_TerminalNoelbakiTerminalKupang_6');
        map.getPane('pane_TerminalNoelbakiTerminalKupang_6').style.zIndex = 406;
        map.getPane('pane_TerminalNoelbakiTerminalKupang_6').style['mix-blend-mode'] = 'normal';
        var layer_TerminalNoelbakiTerminalKupang_6 = new L.geoJson(json_TerminalNoelbakiTerminalKupang_6, {
            attribution: '',
            interactive: true,
            dataVar: 'json_TerminalNoelbakiTerminalKupang_6',
            layerName: 'layer_TerminalNoelbakiTerminalKupang_6',
            pane: 'pane_TerminalNoelbakiTerminalKupang_6',
            onEachFeature: pop_TerminalNoelbakiTerminalKupang_6,
            style: style_TerminalNoelbakiTerminalKupang_6_0,
        });
        bounds_group.addLayer(layer_TerminalNoelbakiTerminalKupang_6);
        map.addLayer(layer_TerminalNoelbakiTerminalKupang_6);
        function pop_TerminalSoe_7(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (var i in e.target._eventParents) {
                        if (typeof e.target._eventParents[i].resetStyle === 'function') {
                            e.target._eventParents[i].resetStyle(e.target);
                        }
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td class="visible-with-data" id="id" colspan="2"><strong>id</strong><br />' + (feature.properties['id'] !== null ? autolinker.link(String(feature.properties['id']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Nama" colspan="2"><strong>Nama</strong><br />' + (feature.properties['Nama'] !== null ? autolinker.link(String(feature.properties['Nama']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_TerminalSoe_7_0() {
            return {
                pane: 'pane_TerminalSoe_7',
                radius: 4.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(190,207,80,1.0)',
                interactive: true,
            }
        }
        map.createPane('pane_TerminalSoe_7');
        map.getPane('pane_TerminalSoe_7').style.zIndex = 407;
        map.getPane('pane_TerminalSoe_7').style['mix-blend-mode'] = 'normal';
        var layer_TerminalSoe_7 = new L.geoJson(json_TerminalSoe_7, {
            attribution: '',
            interactive: true,
            dataVar: 'json_TerminalSoe_7',
            layerName: 'layer_TerminalSoe_7',
            pane: 'pane_TerminalSoe_7',
            onEachFeature: pop_TerminalSoe_7,
            pointToLayer: function (feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.circleMarker(latlng, style_TerminalSoe_7_0(feature));
            },
        });
        bounds_group.addLayer(layer_TerminalSoe_7);
        map.addLayer(layer_TerminalSoe_7);
        function pop_TerminalTipeCKotaKefamenanu_8(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (var i in e.target._eventParents) {
                        if (typeof e.target._eventParents[i].resetStyle === 'function') {
                            e.target._eventParents[i].resetStyle(e.target);
                        }
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td class="visible-with-data" id="id" colspan="2"><strong>id</strong><br />' + (feature.properties['id'] !== null ? autolinker.link(String(feature.properties['id']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Nama" colspan="2"><strong>Nama</strong><br />' + (feature.properties['Nama'] !== null ? autolinker.link(String(feature.properties['Nama']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_TerminalTipeCKotaKefamenanu_8_0() {
            return {
                pane: 'pane_TerminalTipeCKotaKefamenanu_8',
                radius: 4.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(196,60,57,1.0)',
                interactive: true,
            }
        }
        map.createPane('pane_TerminalTipeCKotaKefamenanu_8');
        map.getPane('pane_TerminalTipeCKotaKefamenanu_8').style.zIndex = 408;
        map.getPane('pane_TerminalTipeCKotaKefamenanu_8').style['mix-blend-mode'] = 'normal';
        var layer_TerminalTipeCKotaKefamenanu_8 = new L.geoJson(json_TerminalTipeCKotaKefamenanu_8, {
            attribution: '',
            interactive: true,
            dataVar: 'json_TerminalTipeCKotaKefamenanu_8',
            layerName: 'layer_TerminalTipeCKotaKefamenanu_8',
            pane: 'pane_TerminalTipeCKotaKefamenanu_8',
            onEachFeature: pop_TerminalTipeCKotaKefamenanu_8,
            pointToLayer: function (feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.circleMarker(latlng, style_TerminalTipeCKotaKefamenanu_8_0(feature));
            },
        });
        bounds_group.addLayer(layer_TerminalTipeCKotaKefamenanu_8);
        map.addLayer(layer_TerminalTipeCKotaKefamenanu_8);
        function pop_TerminalTipeCLolowaBelu_9(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (var i in e.target._eventParents) {
                        if (typeof e.target._eventParents[i].resetStyle === 'function') {
                            e.target._eventParents[i].resetStyle(e.target);
                        }
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td class="visible-with-data" id="id" colspan="2"><strong>id</strong><br />' + (feature.properties['id'] !== null ? autolinker.link(String(feature.properties['id']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Nama" colspan="2"><strong>Nama</strong><br />' + (feature.properties['Nama'] !== null ? autolinker.link(String(feature.properties['Nama']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_TerminalTipeCLolowaBelu_9_0() {
            return {
                pane: 'pane_TerminalTipeCLolowaBelu_9',
                radius: 4.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(229,182,54,1.0)',
                interactive: true,
            }
        }
        map.createPane('pane_TerminalTipeCLolowaBelu_9');
        map.getPane('pane_TerminalTipeCLolowaBelu_9').style.zIndex = 409;
        map.getPane('pane_TerminalTipeCLolowaBelu_9').style['mix-blend-mode'] = 'normal';
        var layer_TerminalTipeCLolowaBelu_9 = new L.geoJson(json_TerminalTipeCLolowaBelu_9, {
            attribution: '',
            interactive: true,
            dataVar: 'json_TerminalTipeCLolowaBelu_9',
            layerName: 'layer_TerminalTipeCLolowaBelu_9',
            pane: 'pane_TerminalTipeCLolowaBelu_9',
            onEachFeature: pop_TerminalTipeCLolowaBelu_9,
            pointToLayer: function (feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.circleMarker(latlng, style_TerminalTipeCLolowaBelu_9_0(feature));
            },
        });
        bounds_group.addLayer(layer_TerminalTipeCLolowaBelu_9);
        map.addLayer(layer_TerminalTipeCLolowaBelu_9);
        function pop_TerminalTipeAKefamenanu_10(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (var i in e.target._eventParents) {
                        if (typeof e.target._eventParents[i].resetStyle === 'function') {
                            e.target._eventParents[i].resetStyle(e.target);
                        }
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td class="visible-with-data" id="id" colspan="2"><strong>id</strong><br />' + (feature.properties['id'] !== null ? autolinker.link(String(feature.properties['id']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Nama" colspan="2"><strong>Nama</strong><br />' + (feature.properties['Nama'] !== null ? autolinker.link(String(feature.properties['Nama']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_TerminalTipeAKefamenanu_10_0() {
            return {
                pane: 'pane_TerminalTipeAKefamenanu_10',
                radius: 4.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(190,178,151,1.0)',
                interactive: true,
            }
        }
        map.createPane('pane_TerminalTipeAKefamenanu_10');
        map.getPane('pane_TerminalTipeAKefamenanu_10').style.zIndex = 410;
        map.getPane('pane_TerminalTipeAKefamenanu_10').style['mix-blend-mode'] = 'normal';
        var layer_TerminalTipeAKefamenanu_10 = new L.geoJson(json_TerminalTipeAKefamenanu_10, {
            attribution: '',
            interactive: true,
            dataVar: 'json_TerminalTipeAKefamenanu_10',
            layerName: 'layer_TerminalTipeAKefamenanu_10',
            pane: 'pane_TerminalTipeAKefamenanu_10',
            onEachFeature: pop_TerminalTipeAKefamenanu_10,
            pointToLayer: function (feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.circleMarker(latlng, style_TerminalTipeAKefamenanu_10_0(feature));
            },
        });
        bounds_group.addLayer(layer_TerminalTipeAKefamenanu_10);
        map.addLayer(layer_TerminalTipeAKefamenanu_10);
        function pop_TerminalKotaLamaKupang_11(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (var i in e.target._eventParents) {
                        if (typeof e.target._eventParents[i].resetStyle === 'function') {
                            e.target._eventParents[i].resetStyle(e.target);
                        }
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td class="visible-with-data" id="id" colspan="2"><strong>id</strong><br />' + (feature.properties['id'] !== null ? autolinker.link(String(feature.properties['id']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_TerminalKotaLamaKupang_11_0() {
            return {
                pane: 'pane_TerminalKotaLamaKupang_11',
                radius: 4.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(164,113,88,1.0)',
                interactive: true,
            }
        }
        map.createPane('pane_TerminalKotaLamaKupang_11');
        map.getPane('pane_TerminalKotaLamaKupang_11').style.zIndex = 411;
        map.getPane('pane_TerminalKotaLamaKupang_11').style['mix-blend-mode'] = 'normal';
        var layer_TerminalKotaLamaKupang_11 = new L.geoJson(json_TerminalKotaLamaKupang_11, {
            attribution: '',
            interactive: true,
            dataVar: 'json_TerminalKotaLamaKupang_11',
            layerName: 'layer_TerminalKotaLamaKupang_11',
            pane: 'pane_TerminalKotaLamaKupang_11',
            onEachFeature: pop_TerminalKotaLamaKupang_11,
            pointToLayer: function (feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.circleMarker(latlng, style_TerminalKotaLamaKupang_11_0(feature));
            },
        });
        bounds_group.addLayer(layer_TerminalKotaLamaKupang_11);
        map.addLayer(layer_TerminalKotaLamaKupang_11);
        function pop_TerminalOeboboKotaKupang_12(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (var i in e.target._eventParents) {
                        if (typeof e.target._eventParents[i].resetStyle === 'function') {
                            e.target._eventParents[i].resetStyle(e.target);
                        }
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td class="visible-with-data" id="id" colspan="2"><strong>id</strong><br />' + (feature.properties['id'] !== null ? autolinker.link(String(feature.properties['id']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Nama" colspan="2"><strong>Nama</strong><br />' + (feature.properties['Nama'] !== null ? autolinker.link(String(feature.properties['Nama']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_TerminalOeboboKotaKupang_12_0() {
            return {
                pane: 'pane_TerminalOeboboKotaKupang_12',
                radius: 4.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(133,182,111,1.0)',
                interactive: true,
            }
        }
        map.createPane('pane_TerminalOeboboKotaKupang_12');
        map.getPane('pane_TerminalOeboboKotaKupang_12').style.zIndex = 412;
        map.getPane('pane_TerminalOeboboKotaKupang_12').style['mix-blend-mode'] = 'normal';
        var layer_TerminalOeboboKotaKupang_12 = new L.geoJson(json_TerminalOeboboKotaKupang_12, {
            attribution: '',
            interactive: true,
            dataVar: 'json_TerminalOeboboKotaKupang_12',
            layerName: 'layer_TerminalOeboboKotaKupang_12',
            pane: 'pane_TerminalOeboboKotaKupang_12',
            onEachFeature: pop_TerminalOeboboKotaKupang_12,
            pointToLayer: function (feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.circleMarker(latlng, style_TerminalOeboboKotaKupang_12_0(feature));
            },
        });
        bounds_group.addLayer(layer_TerminalOeboboKotaKupang_12);
        map.addLayer(layer_TerminalOeboboKotaKupang_12);
        function pop_TerminalBimokuKotaKupang_13(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (var i in e.target._eventParents) {
                        if (typeof e.target._eventParents[i].resetStyle === 'function') {
                            e.target._eventParents[i].resetStyle(e.target);
                        }
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td class="visible-with-data" id="id" colspan="2"><strong>id</strong><br />' + (feature.properties['id'] !== null ? autolinker.link(String(feature.properties['id']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Nama" colspan="2"><strong>Nama</strong><br />' + (feature.properties['Nama'] !== null ? autolinker.link(String(feature.properties['Nama']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_TerminalBimokuKotaKupang_13_0() {
            return {
                pane: 'pane_TerminalBimokuKotaKupang_13',
                radius: 4.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(125,139,143,1.0)',
                interactive: true,
            }
        }
        map.createPane('pane_TerminalBimokuKotaKupang_13');
        map.getPane('pane_TerminalBimokuKotaKupang_13').style.zIndex = 413;
        map.getPane('pane_TerminalBimokuKotaKupang_13').style['mix-blend-mode'] = 'normal';
        var layer_TerminalBimokuKotaKupang_13 = new L.geoJson(json_TerminalBimokuKotaKupang_13, {
            attribution: '',
            interactive: true,
            dataVar: 'json_TerminalBimokuKotaKupang_13',
            layerName: 'layer_TerminalBimokuKotaKupang_13',
            pane: 'pane_TerminalBimokuKotaKupang_13',
            onEachFeature: pop_TerminalBimokuKotaKupang_13,
            pointToLayer: function (feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.circleMarker(latlng, style_TerminalBimokuKotaKupang_13_0(feature));
            },
        });
        bounds_group.addLayer(layer_TerminalBimokuKotaKupang_13);
        map.addLayer(layer_TerminalBimokuKotaKupang_13);
        function pop_TerminalNoelbaki_14(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (var i in e.target._eventParents) {
                        if (typeof e.target._eventParents[i].resetStyle === 'function') {
                            e.target._eventParents[i].resetStyle(e.target);
                        }
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td class="visible-with-data" id="id" colspan="2"><strong>id</strong><br />' + (feature.properties['id'] !== null ? autolinker.link(String(feature.properties['id']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Nama" colspan="2"><strong>Nama</strong><br />' + (feature.properties['Nama'] !== null ? autolinker.link(String(feature.properties['Nama']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_TerminalNoelbaki_14_0() {
            return {
                pane: 'pane_TerminalNoelbaki_14',
                radius: 4.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(145,82,45,1.0)',
                interactive: true,
            }
        }
        map.createPane('pane_TerminalNoelbaki_14');
        map.getPane('pane_TerminalNoelbaki_14').style.zIndex = 414;
        map.getPane('pane_TerminalNoelbaki_14').style['mix-blend-mode'] = 'normal';
        var layer_TerminalNoelbaki_14 = new L.geoJson(json_TerminalNoelbaki_14, {
            attribution: '',
            interactive: true,
            dataVar: 'json_TerminalNoelbaki_14',
            layerName: 'layer_TerminalNoelbaki_14',
            pane: 'pane_TerminalNoelbaki_14',
            onEachFeature: pop_TerminalNoelbaki_14,
            pointToLayer: function (feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.circleMarker(latlng, style_TerminalNoelbaki_14_0(feature));
            },
        });
        bounds_group.addLayer(layer_TerminalNoelbaki_14);
        map.addLayer(layer_TerminalNoelbaki_14);
        function pop_DiliTimorLeste_15(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (var i in e.target._eventParents) {
                        if (typeof e.target._eventParents[i].resetStyle === 'function') {
                            e.target._eventParents[i].resetStyle(e.target);
                        }
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td class="visible-with-data" id="id" colspan="2"><strong>id</strong><br />' + (feature.properties['id'] !== null ? autolinker.link(String(feature.properties['id']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Nama" colspan="2"><strong>Nama</strong><br />' + (feature.properties['Nama'] !== null ? autolinker.link(String(feature.properties['Nama']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_DiliTimorLeste_15_0() {
            return {
                pane: 'pane_DiliTimorLeste_15',
                radius: 4.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(225,89,137,1.0)',
                interactive: true,
            }
        }
        map.createPane('pane_DiliTimorLeste_15');
        map.getPane('pane_DiliTimorLeste_15').style.zIndex = 415;
        map.getPane('pane_DiliTimorLeste_15').style['mix-blend-mode'] = 'normal';
        var layer_DiliTimorLeste_15 = new L.geoJson(json_DiliTimorLeste_15, {
            attribution: '',
            interactive: true,
            dataVar: 'json_DiliTimorLeste_15',
            layerName: 'layer_DiliTimorLeste_15',
            pane: 'pane_DiliTimorLeste_15',
            onEachFeature: pop_DiliTimorLeste_15,
            pointToLayer: function (feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.circleMarker(latlng, style_DiliTimorLeste_15_0(feature));
            },
        });
        bounds_group.addLayer(layer_DiliTimorLeste_15);
        map.addLayer(layer_DiliTimorLeste_15);
        function pop_TerminalBetunMalaka_16(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (var i in e.target._eventParents) {
                        if (typeof e.target._eventParents[i].resetStyle === 'function') {
                            e.target._eventParents[i].resetStyle(e.target);
                        }
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td class="visible-with-data" id="id" colspan="2"><strong>id</strong><br />' + (feature.properties['id'] !== null ? autolinker.link(String(feature.properties['id']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td class="visible-with-data" id="Nama" colspan="2"><strong>Nama</strong><br />' + (feature.properties['Nama'] !== null ? autolinker.link(String(feature.properties['Nama']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_TerminalBetunMalaka_16_0() {
            return {
                pane: 'pane_TerminalBetunMalaka_16',
                radius: 4.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(190,207,80,1.0)',
                interactive: true,
            }
        }
        map.createPane('pane_TerminalBetunMalaka_16');
        map.getPane('pane_TerminalBetunMalaka_16').style.zIndex = 416;
        map.getPane('pane_TerminalBetunMalaka_16').style['mix-blend-mode'] = 'normal';
        var layer_TerminalBetunMalaka_16 = new L.geoJson(json_TerminalBetunMalaka_16, {
            attribution: '',
            interactive: true,
            dataVar: 'json_TerminalBetunMalaka_16',
            layerName: 'layer_TerminalBetunMalaka_16',
            pane: 'pane_TerminalBetunMalaka_16',
            onEachFeature: pop_TerminalBetunMalaka_16,
            pointToLayer: function (feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.circleMarker(latlng, style_TerminalBetunMalaka_16_0(feature));
            },
        });
        bounds_group.addLayer(layer_TerminalBetunMalaka_16);
        map.addLayer(layer_TerminalBetunMalaka_16);
        const url = {"Nominatim OSM": "https://nominatim.openstreetmap.org/search?format=geojson&addressdetails=1&",
        "France BAN": "https://api-adresse.data.gouv.fr/search/?"}
        var photonControl = L.control.photon({
            url: url["Nominatim OSM"],
            feedbackLabel: '',
            position: 'topleft',
            includePosition: true,
            initial: true,
            // resultsHandler: myHandler,
        }).addTo(map);
        photonControl._container.childNodes[0].style.borderRadius="10px"
        // Create a variable to store the geoJSON data
        var x = null;
        // Create a variable to store the marker
        var marker = null;
        // Add an event listener to the Photon control to create a marker from the returned geoJSON data
        var z = null;
        photonControl.on('selected', function(e) {
            console.log(photonControl.search.resultsContainer);
            if (x != null) {
                map.removeLayer(obj3.marker);
                map.removeLayer(x);
            }
            obj2.gcd = e.choice;
            x = L.geoJSON(obj2.gcd).addTo(map);
            var label = typeof obj2.gcd.properties.label === 'undefined' ? obj2.gcd.properties.display_name : obj2.gcd.properties.label;
            obj3.marker = L.marker(x.getLayers()[0].getLatLng()).bindPopup(label).addTo(map);
            map.setView(x.getLayers()[0].getLatLng(), 17);
            z = typeof e.choice.properties.label === 'undefined'? e.choice.properties.display_name : e.choice.properties.label;
            console.log(e);
            e.target.input.value = z;
        });
        var search = document.getElementsByClassName("leaflet-photon leaflet-control")[0];
        search.classList.add("leaflet-control-search")
        search.style.display = "flex";
        search.style.backgroundColor="rgba(255,255,255,0.5)" 

        // Create the new button element
        var button = document.createElement("div");
        button.id = "gcd-button-control";
        button.className = "gcd-gl-btn fa fa-search search-button";

        // Insert the button at the beginning of the search control
        search.insertBefore(button, search.firstChild);
        last = search.lastChild;
        last.style.display = "none";
        button.addEventListener("click", function (e) {
            if (last.style.display === "none") {
                last.style.display = "block";
            } else {
                last.style.display = "none";
            }
        });
        var overlaysTree = [
        {label: '<b>Rute Angkutan Umum</b>', collapsed: true, selectAllCheckbox: true, children: [
            {label: '<img src="legend/TerminalBetunMalaka_16.png" /> Terminal Betun Malaka', layer: layer_TerminalBetunMalaka_16},
            {label: '<img src="legend/DiliTimorLeste_15.png" /> Dili Timor Leste', layer: layer_DiliTimorLeste_15},
            {label: '<img src="legend/TerminalNoelbaki_14.png" /> Terminal Noelbaki', layer: layer_TerminalNoelbaki_14},
            {label: '<img src="legend/TerminalBimokuKotaKupang_13.png" /> Terminal Bimoku Kota Kupang', layer: layer_TerminalBimokuKotaKupang_13},
            {label: '<img src="legend/TerminalOeboboKotaKupang_12.png" /> Terminal Oebobo Kota Kupang', layer: layer_TerminalOeboboKotaKupang_12},
            {label: '<img src="legend/TerminalKotaLamaKupang_11.png" /> Terminal Kota Lama Kupang', layer: layer_TerminalKotaLamaKupang_11},
            {label: '<img src="legend/TerminalTipeAKefamenanu_10.png" /> Terminal Tipe A Kefamenanu', layer: layer_TerminalTipeAKefamenanu_10},
            {label: '<img src="legend/TerminalTipeCLolowaBelu_9.png" /> Terminal Tipe C Lolowa Belu', layer: layer_TerminalTipeCLolowaBelu_9},
            {label: '<img src="legend/TerminalTipeCKotaKefamenanu_8.png" /> Terminal Tipe C Kota Kefamenanu', layer: layer_TerminalTipeCKotaKefamenanu_8},
            {label: '<img src="legend/TerminalSoe_7.png" /> Terminal Soe', layer: layer_TerminalSoe_7},
            {label: '<img src="legend/TerminalNoelbakiTerminalKupang_6.png" /> Terminal Noelbaki-Terminal Kupang', layer: layer_TerminalNoelbakiTerminalKupang_6},
            {label: '<img src="legend/TerminalOeboboTerminalSoe_5.png" /> Terminal Oebobo-Terminal Soe', layer: layer_TerminalOeboboTerminalSoe_5},
            {label: '<img src="legend/TerminalOeboboTerminalKefamenanu_4.png" /> Terminal Oebobo-Terminal Kefamenanu', layer: layer_TerminalOeboboTerminalKefamenanu_4},
            {label: '<img src="legend/TerminalOeboboTerminalLolowa_3.png" /> Terminal Oebobo-Terminal Lolowa', layer: layer_TerminalOeboboTerminalLolowa_3},
            {label: '<img src="legend/TerminalBimokuDiliTimorLeste_2.png" /> Terminal Bimoku - Dili Timor Leste', layer: layer_TerminalBimokuDiliTimorLeste_2},
            {label: '<img src="legend/TerminalOeboboTerminalBetunMalaka_1.png" /> Terminal Oebobo-Terminal Betun Malaka', layer: layer_TerminalOeboboTerminalBetunMalaka_1},]},
            {label: "OpenStreetMap", layer: layer_OpenStreetMap_0},]
        var lay = L.control.layers.tree(null, overlaysTree,{
            //namedToggle: true,
            //selectorBack: false,
            //closedSymbol: '&#8862; &#x1f5c0;',
            //openedSymbol: '&#8863; &#x1f5c1;',
            //collapseAll: 'Collapse all',
            //expandAll: 'Expand all',
            collapsed: false, 
        });
        lay.addTo(map);
		document.addEventListener("DOMContentLoaded", function() {
            // set new Layers List height which considers toggle icon
            function newLayersListHeight() {
                var layerScrollbarElement = document.querySelector('.leaflet-control-layers-scrollbar');
                if (layerScrollbarElement) {
                    var layersListElement = document.querySelector('.leaflet-control-layers-list');
                    var originalHeight = layersListElement.style.height 
                        || window.getComputedStyle(layersListElement).height;
                    var newHeight = parseFloat(originalHeight) - 50;
                    layersListElement.style.height = newHeight + 'px';
                }
            }
            var isLayersListExpanded = true;
            var controlLayersElement = document.querySelector('.leaflet-control-layers');
            var toggleLayerControl = document.querySelector('.leaflet-control-layers-toggle');
            // toggle Collapsed/Expanded and apply new Layers List height
            toggleLayerControl.addEventListener('click', function() {
                if (isLayersListExpanded) {
                    controlLayersElement.classList.remove('leaflet-control-layers-expanded');
                } else {
                    controlLayersElement.classList.add('leaflet-control-layers-expanded');
                }
                isLayersListExpanded = !isLayersListExpanded;
                newLayersListHeight()
            });	
			// apply new Layers List height if toggle layerstree
			if (controlLayersElement) {
				controlLayersElement.addEventListener('click', function(event) {
					var toggleLayerHeaderPointer = event.target.closest('.leaflet-layerstree-header-pointer span');
					if (toggleLayerHeaderPointer) {
						newLayersListHeight();
					}
				});
			}
            // Collapsed/Expanded at Start to apply new height
            setTimeout(function() {
                toggleLayerControl.click();
            }, 10);
            setTimeout(function() {
                toggleLayerControl.click();
            }, 10);
            // Collapsed touch/small screen
            var isSmallScreen = window.innerWidth < 650;
            if (isSmallScreen) {
                setTimeout(function() {
                    controlLayersElement.classList.remove('leaflet-control-layers-expanded');
                    isLayersListExpanded = !isLayersListExpanded;
                }, 500);
            }  
        });       
        setBounds();
        var i = 0;
        layer_TerminalSoe_7.eachLayer(function(layer) {
            var context = {
                feature: layer.feature,
                variables: {}
            };
            layer.bindTooltip((layer.feature.properties['Nama'] !== null?String('<div style="color: #323232; font-size: 10pt; font-family: \'Arial\', sans-serif;">' + layer.feature.properties['Nama']) + '</div>':''), {permanent: true, offset: [-0, -16], className: 'css_TerminalSoe_7'});
            labels.push(layer);
            totalMarkers += 1;
              layer.added = true;
              addLabel(layer, i);
              i++;
        });
        var i = 0;
        layer_TerminalTipeCKotaKefamenanu_8.eachLayer(function(layer) {
            var context = {
                feature: layer.feature,
                variables: {}
            };
            layer.bindTooltip((layer.feature.properties['Nama'] !== null?String('<div style="color: #323232; font-size: 10pt; font-family: \'Arial\', sans-serif;">' + layer.feature.properties['Nama']) + '</div>':''), {permanent: true, offset: [-0, -16], className: 'css_TerminalTipeCKotaKefamenanu_8'});
            labels.push(layer);
            totalMarkers += 1;
              layer.added = true;
              addLabel(layer, i);
              i++;
        });
        var i = 0;
        layer_TerminalTipeCLolowaBelu_9.eachLayer(function(layer) {
            var context = {
                feature: layer.feature,
                variables: {}
            };
            layer.bindTooltip((layer.feature.properties['Nama'] !== null?String('<div style="color: #323232; font-size: 10pt; font-family: \'Arial\', sans-serif;">' + layer.feature.properties['Nama']) + '</div>':''), {permanent: true, offset: [-0, -16], className: 'css_TerminalTipeCLolowaBelu_9'});
            labels.push(layer);
            totalMarkers += 1;
              layer.added = true;
              addLabel(layer, i);
              i++;
        });
        var i = 0;
        layer_TerminalTipeAKefamenanu_10.eachLayer(function(layer) {
            var context = {
                feature: layer.feature,
                variables: {}
            };
            layer.bindTooltip((layer.feature.properties['Nama'] !== null?String('<div style="color: #323232; font-size: 10pt; font-family: \'Arial\', sans-serif;">' + layer.feature.properties['Nama']) + '</div>':''), {permanent: true, offset: [-0, -16], className: 'css_TerminalTipeAKefamenanu_10'});
            labels.push(layer);
            totalMarkers += 1;
              layer.added = true;
              addLabel(layer, i);
              i++;
        });
        var i = 0;
        layer_TerminalOeboboKotaKupang_12.eachLayer(function(layer) {
            var context = {
                feature: layer.feature,
                variables: {}
            };
            layer.bindTooltip((layer.feature.properties['Nama'] !== null?String('<div style="color: #323232; font-size: 10pt; font-family: \'Arial\', sans-serif;">' + layer.feature.properties['Nama']) + '</div>':''), {permanent: true, offset: [-0, -16], className: 'css_TerminalOeboboKotaKupang_12'});
            labels.push(layer);
            totalMarkers += 1;
              layer.added = true;
              addLabel(layer, i);
              i++;
        });
        var i = 0;
        layer_TerminalBimokuKotaKupang_13.eachLayer(function(layer) {
            var context = {
                feature: layer.feature,
                variables: {}
            };
            layer.bindTooltip((layer.feature.properties['Nama'] !== null?String('<div style="color: #323232; font-size: 10pt; font-family: \'Arial\', sans-serif;">' + layer.feature.properties['Nama']) + '</div>':''), {permanent: true, offset: [-0, -16], className: 'css_TerminalBimokuKotaKupang_13'});
            labels.push(layer);
            totalMarkers += 1;
              layer.added = true;
              addLabel(layer, i);
              i++;
        });
        var i = 0;
        layer_TerminalNoelbaki_14.eachLayer(function(layer) {
            var context = {
                feature: layer.feature,
                variables: {}
            };
            layer.bindTooltip((layer.feature.properties['Nama'] !== null?String('<div style="color: #323232; font-size: 10pt; font-family: \'Arial\', sans-serif;">' + layer.feature.properties['Nama']) + '</div>':''), {permanent: true, offset: [-0, -16], className: 'css_TerminalNoelbaki_14'});
            labels.push(layer);
            totalMarkers += 1;
              layer.added = true;
              addLabel(layer, i);
              i++;
        });
        var i = 0;
        layer_DiliTimorLeste_15.eachLayer(function(layer) {
            var context = {
                feature: layer.feature,
                variables: {}
            };
            layer.bindTooltip((layer.feature.properties['Nama'] !== null?String('<div style="color: #323232; font-size: 10pt; font-family: \'Arial\', sans-serif;">' + layer.feature.properties['Nama']) + '</div>':''), {permanent: true, offset: [-0, -16], className: 'css_DiliTimorLeste_15'});
            labels.push(layer);
            totalMarkers += 1;
              layer.added = true;
              addLabel(layer, i);
              i++;
        });
        var i = 0;
        layer_TerminalBetunMalaka_16.eachLayer(function(layer) {
            var context = {
                feature: layer.feature,
                variables: {}
            };
            layer.bindTooltip((layer.feature.properties['Nama'] !== null?String('<div style="color: #323232; font-size: 10pt; font-family: \'Arial\', sans-serif;">' + layer.feature.properties['Nama']) + '</div>':''), {permanent: true, offset: [-0, -16], className: 'css_TerminalBetunMalaka_16'});
            labels.push(layer);
            totalMarkers += 1;
              layer.added = true;
              addLabel(layer, i);
              i++;
        });
        resetLabels([layer_TerminalSoe_7,layer_TerminalTipeCKotaKefamenanu_8,layer_TerminalTipeCLolowaBelu_9,layer_TerminalTipeAKefamenanu_10,layer_TerminalOeboboKotaKupang_12,layer_TerminalBimokuKotaKupang_13,layer_TerminalNoelbaki_14,layer_DiliTimorLeste_15,layer_TerminalBetunMalaka_16]);
        map.on("zoomend", function(){
            resetLabels([layer_TerminalSoe_7,layer_TerminalTipeCKotaKefamenanu_8,layer_TerminalTipeCLolowaBelu_9,layer_TerminalTipeAKefamenanu_10,layer_TerminalOeboboKotaKupang_12,layer_TerminalBimokuKotaKupang_13,layer_TerminalNoelbaki_14,layer_DiliTimorLeste_15,layer_TerminalBetunMalaka_16]);
        });
        map.on("layeradd", function(){
            resetLabels([layer_TerminalSoe_7,layer_TerminalTipeCKotaKefamenanu_8,layer_TerminalTipeCLolowaBelu_9,layer_TerminalTipeAKefamenanu_10,layer_TerminalOeboboKotaKupang_12,layer_TerminalBimokuKotaKupang_13,layer_TerminalNoelbaki_14,layer_DiliTimorLeste_15,layer_TerminalBetunMalaka_16]);
        });
        map.on("layerremove", function(){
            resetLabels([layer_TerminalSoe_7,layer_TerminalTipeCKotaKefamenanu_8,layer_TerminalTipeCLolowaBelu_9,layer_TerminalTipeAKefamenanu_10,layer_TerminalOeboboKotaKupang_12,layer_TerminalBimokuKotaKupang_13,layer_TerminalNoelbaki_14,layer_DiliTimorLeste_15,layer_TerminalBetunMalaka_16]);
        });
        </script>
    </body>
</html>
